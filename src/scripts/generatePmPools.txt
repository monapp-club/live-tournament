let rankingTable = base.getTable("ranking");
let rankingPmTable = base.getTable("ranking_pm");
let gamesPmTable = base.getTable("games_pm");
let categoriesTable = base.getTable("categories");

// Get ranking records
const rankingRecords = await rankingTable.selectRecordsAsync({
    fields: ['team', 'name', 'category_id', 'count', 'points']
});

// Get categories records
const categoriesRecords = await categoriesTable.selectRecordsAsync({
    fields: ['name']
});

const recordsToCreate = categoriesRecords.records.reduce((acc, category, categoryIndex) => {
    // Get A & B teams associated to the category
    const teams = rankingRecords.records.filter((r) => {
        const categoryLink = r.getCellValueAsString('category_id');
        return categoryLink === category.name && !['u12-c', 'u10-c'].includes(category.name)
    });

    // Get C teams associated to the category
    const teamsC = rankingRecords.records.filter((r) => {
        const categoryLink = r.getCellValueAsString('category_id');
        return categoryLink === category.name && ['u12-c', 'u10-c'].includes(category.name)
    }).sort((a, b) => a.getCellValue('points') - b.getCellValue('points'));

    // Build new A & B pools from the ranking
    const poolsByRanking = teams.reduce((acc, cur) => {
        const count = cur.getCellValueAsString('count');
        const teamRecordId = cur.getCellValue('team')[0].id;
        if (acc?.[count]) {
            acc?.[count]?.push({
                ...cur,
                teamRecordId
            });
        } else {
            acc[count] = [{
                ...cur,
                teamRecordId
            }]
        }
        return acc;
    }, []);

    // Build new C pools from the ranking
    const poolsByRankingC = teamsC.reduce((acc, cur) => {
        const pool = teamsC.indexOf(cur) > 4 ? '2' : '1';
        const teamRecordId = cur.getCellValue('team')[0].id;
        if (acc?.[pool]) {
            acc?.[pool]?.push({
                ...cur,
                teamRecordId
            });
        } else {
            acc[pool] = [{
                ...cur,
                teamRecordId
            }]
        }
        return acc;
    }, []);

    [poolsByRanking, poolsByRankingC].flat().forEach((rank, index) => {
        rank.forEach(async (team, teamIndex) => {
            acc.push({
                fields: {
                    team: [{ id: team.teamRecordId }],
                    pool: { name: `Poule ${index + 1}`},
                    count: teamIndex + 1,
                }
            })
        })
    })

    return acc;
}, []);


// Get record ids
const rankingPmRecords = await rankingPmTable.selectRecordsAsync();
const rankingPmIdsToUpdate = rankingPmRecords.recordIds;

const recordsToCreateWithIndex = recordsToCreate.map((record, index) => ({
    ...record,
    id: rankingPmIdsToUpdate[index],
}))

console.log(recordsToCreateWithIndex);
for (let i = 0; i < recordsToCreateWithIndex.length; i += 50) {
    await rankingPmTable.updateRecordsAsync(recordsToCreateWithIndex.slice(i, i + 50));
}